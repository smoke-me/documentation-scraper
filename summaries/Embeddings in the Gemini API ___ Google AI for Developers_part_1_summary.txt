# Gemini API: Text Embeddings Documentation

## Overview
The Gemini API provides the `text-embedding-004` model for generating high-quality embeddings for words, phrases, and sentences. These embeddings capture semantic meaning and context, enabling various AI applications such as semantic search, text classification, and clustering.

## Key Concepts
- **Embeddings**: Vectors that represent the semantic meaning of text. Similar texts have closer embeddings in vector space.
- **Use Cases**:
  - **Information Retrieval**: Retrieve semantically similar text based on input.
  - **Clustering**: Identify trends by comparing groups of embeddings.
  - **Vector Database**: Store embeddings for efficient retrieval and processing.
  - **Classification**: Train models to categorize documents using embeddings.

## Generating Embeddings
To generate text embeddings, use the `embedContent` method. Below are examples in different programming languages:

### Python
```python
from google import genai

client = genai.Client(api_key="GEMINI_API_KEY")
result = client.models.embed_content(model="text-embedding-004", contents="What is the meaning of life?")
print(result.embeddings)
```

### JavaScript
```javascript
const { GoogleGenerativeAI } = require("@google/generative-ai");
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

async function run() {
    const model = genAI.getGenerativeModel({ model: "text-embedding-004" });
    const result = await model.embedContent("What is the meaning of life?");
    console.log(result.embedding.values);
}
run();
```

### cURL
```bash
curl "https://generativelanguage.googleapis.com/v1beta/models/text-embedding-004:embedContent?key=$GEMINI_API_KEY" \
-H 'Content-Type: application/json' \
-d '{"model": "models/text-embedding-004", "content": { "parts":[{ "text": "What is the meaning of life?"}]} }'
```

### Go
```go
ctx := context.Background()
client, err := genai.NewClient(ctx, option.WithAPIKey(os.Getenv("GEMINI_API_KEY")))
if err != nil {
    log.Fatal(err)
}
defer client.Close()

em := client.EmbeddingModel("text-embedding-004")
res, err := em.EmbedContent(ctx, genai.Text("What is the meaning of life?"))
if err != nil {
    panic(err)
}
fmt.Println(res.Embedding.Values)
```

## Model Options
- **Text Embeddings**: An updated model with elastic embedding sizes under 768 dimensions, suitable for new projects with minor performance trade-offs.

## Licensing
Content is licensed under the Creative Commons Attribution 4.0 License, and code samples under the Apache 2.0 License. 

For further details, refer to the [Google Developers Site Policies](https://developers.google.com/site-policies).