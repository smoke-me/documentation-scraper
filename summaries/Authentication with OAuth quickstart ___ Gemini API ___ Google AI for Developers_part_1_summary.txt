# OAuth Authentication Quickstart for Gemini API

## Overview
This guide outlines the steps to authenticate with the Gemini API using OAuth. For simpler access, consider using an API key. OAuth is recommended for stricter access controls, especially in production environments.

## Prerequisites
- A Google Cloud project with the Google Generative Language API enabled.
- Test user(s) added to the OAuth consent screen.

## Steps to Set Up OAuth Authentication

### 1. Enable Google Generative Language API
- Go to the Google Cloud Console.
- Navigate to **Menu > APIs & Services > Library**.
- Enable the **Google Generative Language API**.

### 2. Configure OAuth Consent Screen
- Navigate to **Menu > APIs & Services > OAuth consent screen**.
- Select **External** as the user type and click **Create**.
- Fill out the app registration form (most fields can be left blank) and click **Save and Continue**.
- Skip adding scopes for now, and click **Save and Continue**.
- Under **Test users**, click **Add users**, enter your email and any other test users, then click **Save and Continue**.
- Review the app registration summary and click **Back to Dashboard**.

### 3. Create OAuth 2.0 Client ID
- Navigate to **Menu > APIs & Services > Credentials**.
- Click **Create Credentials** and select **OAuth client ID**.
- Name the credential and click **Create**.
- Note the **Client ID** and **Client secret** displayed.
- Download the JSON file, rename it to `client_secret.json`, and move it to your working directory.

### 4. Set Up Application Default Credentials
Run the following command to authenticate and set up your application default credentials (ADC):
```bash
gcloud auth application-default login --client-id-file=client_secret.json --scopes='https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/generative-language.retriever'
```
*Note: You may see a "Google hasn't verified this app" dialog; choose "continue".*

### 5. Test Authentication
To verify that authentication is working, use the following `curl` command:
```bash
access_token=$(gcloud auth application-default print-access-token)
project_id=<MY PROJECT ID>
curl -X GET https://generativelanguage.googleapis.com/v1/models \
-H 'Content-Type: application/json' \
-H "Authorization: Bearer ${access_token}" \
-H "x-goog-user-project: ${project_id}" | grep '"name"'
```

### 6. Using Python Client Libraries
Install the required libraries:
```bash
pip install --upgrade -q google-api-python-client google-auth-httplib2 google-auth-oauthlib
pip install google-generativeai
```

Create a `load_creds.py` file to manage OAuth tokens:
```python
import os.path
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow

SCOPES = ['https://www.googleapis.com/auth/generative-language.retriever']

def load_creds():
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('client_secret.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.json', 'w') as token:
            token.write(creds.to_json())
    return creds
```

Use the credentials in your application:
```python
import google.generativeai as genai
from load_creds import load_creds

creds = load_creds()
genai.configure(credentials=creds)
print('Available base models:', [m.name for m in genai.list_models()])
```

### 7. First Run
On the first execution, a browser window will open for authorization. Select the test account configured earlier. Subsequent runs will use the stored authorization information.

## Licensing
Content is licensed under the Creative Commons Attribution 4.0 License; code samples are under the Apache 2.0 License.