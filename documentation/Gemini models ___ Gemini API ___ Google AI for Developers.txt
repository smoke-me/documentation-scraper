URL: https://ai.google.dev/gemini-api/docs/models/gemini#gemini-2.0-flash
Token Count: 1280

Our newest multimodal model, with next generation features and improved capabilities Input audio, images, video, and text, get text responses Generate code, extract data, analyze files, generate graphs, and more Low latency, enhanced performance, built to power agentic experiences A Gemini 2.0 Flash model optimized for cost efficiency and low latency Input audio, images, video, and text, get text responses Outperforms 1.5 Flash on the majority of benchmarks A 1 million token context window and multimodal input, like Flash 2.0 Our most balanced multimodal model with great performance for most tasks Input audio, images, video, and text, get text responses The Gemini API offers different models that are optimized for specific use cases. Here's a brief overview of Gemini variants that are available: You can view the rate limits for each model on the rate limits page. Gemini 2.0 Flash delivers next-gen features and improved capabilities, including superior speed, native tool use, multimodal generation, and a 1M token context window. Audio (coming soon), images (coming soon), and text A Gemini 2.0 Flash model optimized for cost efficiency and low latency. Gemini 1.5 Flash is a fast and versatile multimodal model for scaling across diverse tasks. Gemini 1.5 Flash-8B is a small model designed for lower intelligence tasks. Gemini 1.5 Pro is a mid-size multimodal model that is optimized for a wide-range of reasoning tasks. 1.5 Pro can process large amounts of data at once, including 2 hours of video, 19 hours of audio, codebases with 60,000 lines of code, or 2,000 pages of text. Text embeddings are used to measure the relatedness of strings and are widely used in many AI applications. text-embedding-004 achieves a stronger retrieval performance and outperforms existing models with comparable dimensions, on the standard MTEB embedding benchmarks. You can use the Embedding model to generate text embeddings for input text. The Embedding model is optimized for creating embeddings with 768 dimensions for text of up to 2,048 tokens. You can use the AQA model to perform Attributed Question-Answering (AQA)â€“related tasks over a document, corpus, or a set of passages. The AQA model returns answers to questions that are grounded in provided sources, along with estimating answerable probability. See the examples to explore the capabilities of these model variations. [*] A token is equivalent to about 4 characters for Gemini models. 100 tokens are about 60-80 English words. Gemini models are available in either preview or stable versions. In your code, you can use one of the following model name formats to specify which model and version you want to use. Latest: Points to the cutting-edge version of the model for a specified generation and variation. The underlying model is updated regularly and might be a preview version. Only exploratory testing apps and prototypes should use this alias. To specify the latest version, use the following pattern: <model>-<generation>-<variation>-latest. For example, gemini-1.0-pro-latest. Latest: Points to the cutting-edge version of the model for a specified generation and variation. The underlying model is updated regularly and might be a preview version. Only exploratory testing apps and prototypes should use this alias. To specify the latest version, use the following pattern: <model>-<generation>-<variation>-latest. For example, gemini-1.0-pro-latest. Latest stable: Points to the most recent stable version released for the specified model generation and variation. To specify the latest stable version, use the following pattern: <model>-<generation>-<variation>. For example, gemini-1.0-pro. Latest stable: Points to the most recent stable version released for the specified model generation and variation. To specify the latest stable version, use the following pattern: <model>-<generation>-<variation>. For example, gemini-1.0-pro. Stable: Points to a specific stable model. Stable models don't change. Most production apps should use a specific stable model. To specify a stable version, use the following pattern: <model>-<generation>-<variation>-<version>. For example, gemini-1.0-pro-001. Stable: Points to a specific stable model. Stable models don't change. Most production apps should use a specific stable model. To specify a stable version, use the following pattern: <model>-<generation>-<variation>-<version>. For example, gemini-1.0-pro-001. Experimental: Points to an experimental model available in Preview, as defined in the Terms, meaning it is not for production use. We release experimental models to gather feedback, get our latest updates into the hands of developers quickly, and highlight the pace of innovation happening at Google. What we learn from experimental launches informs how we release models more widely. An experimental model can be swapped for another without prior notice. We don't guarantee that an experimental model will become a stable model in the future. To specify an experimental version, use the following pattern: <model>-<generation>-<variation>-<version>. For example, gemini-exp-1121. Experimental: Points to an experimental model available in Preview, as defined in the Terms, meaning it is not for production use. We release experimental models to gather feedback, get our latest updates into the hands of developers quickly, and highlight the pace of innovation happening at Google. What we learn from experimental launches informs how we release models more widely. An experimental model can be swapped for another without prior notice. We don't guarantee that an experimental model will become a stable model in the future. To specify an experimental version, use the following pattern: <model>-<generation>-<variation>-<version>. For example, gemini-exp-1121. Gemini models are trained to work with the following languages: Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates.