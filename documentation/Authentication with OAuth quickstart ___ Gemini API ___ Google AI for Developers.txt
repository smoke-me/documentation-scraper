URL: https://ai.google.dev/gemini-api/docs/oauth
Token Count: 2340

The easiest way to authenticate to the Gemini API is to configure an API key, as described in the Gemini API quickstart. If you need stricter access controls, you can use OAuth instead. This guide will help you set up authentication with OAuth. This guide uses a simplified authentication approach that is appropriate for a testing environment. For a production environment, learn about authentication and authorization before choosing the access credentials that are appropriate for your app. Manage credentials in your program instead of using gcloud auth To complete this quickstart, you first need to setup your Cloud project. Before using Google APIs, you need to turn them on in a Google Cloud project. In the Google Cloud console, enable the Google Generative Language API. Enable the API In the Google Cloud console, enable the Google Generative Language API. Next configure the project's OAuth consent screen and add yourself as a test user. If you've already completed this step for your Cloud project, skip to the next section. In the Google Cloud console, go to Menu > APIs & Services > OAuth consent screen. Go to OAuth consent screen In the Google Cloud console, go to Menu > APIs & Services > OAuth consent screen. Select the user type External for your app, then click Create. Select the user type External for your app, then click Create. Complete the app registration form (you can leave most fields blank), then click Save and Continue. Complete the app registration form (you can leave most fields blank), then click Save and Continue. For now, you can skip adding scopes and click Save and Continue. In the future, when you create an app for use outside of your Google Workspace organization, you must add and verify the authorization scopes that your app requires. For now, you can skip adding scopes and click Save and Continue. In the future, when you create an app for use outside of your Google Workspace organization, you must add and verify the authorization scopes that your app requires. Add test users: Under Test users, click Add users. Enter your email address and any other authorized test users, then click Save and Continue. Enter your email address and any other authorized test users, then click Save and Continue. Review your app registration summary. To make changes, click Edit. If the app registration looks OK, click Back to Dashboard. Review your app registration summary. To make changes, click Edit. If the app registration looks OK, click Back to Dashboard. To authenticate as an end user and access user data in your app, you need to create one or more OAuth 2.0 Client IDs. A client ID is used to identify a single app to Google's OAuth servers. If your app runs on multiple platforms, you must create a separate client ID for each platform. In the Google Cloud console, go to Menu > APIs & Services > Credentials. Go to Credentials In the Google Cloud console, go to Menu > APIs & Services > Credentials. In the Name field, type a name for the credential. This name is only shown in the Google Cloud console. In the Name field, type a name for the credential. This name is only shown in the Google Cloud console. Click Create. The OAuth client created screen appears, showing your new Client ID and Client secret. Click Create. The OAuth client created screen appears, showing your new Client ID and Client secret. Click OK. The newly created credential appears under OAuth 2.0 Client IDs. Click OK. The newly created credential appears under OAuth 2.0 Client IDs. Click the download button to save the JSON file. It will be saved as client_secret_<identifier>.json, and rename it to client_secret.json and move it to your working directory. Click the download button to save the JSON file. It will be saved as client_secret_<identifier>.json, and rename it to client_secret.json and move it to your working directory. To convert the client_secret.json file into usable credentials, pass its location the gcloud auth application-default login command's --client-id-file argument. gcloud auth application-default login \ --client-id-file=client_secret.json \ --scopes='https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/generative-language.retriever' gcloud auth application-default login \ --client-id-file=client_secret.json \ --scopes='https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/generative-language.retriever' The simplified project setup in this tutorial triggers a "Google hasn't verified this app." dialog. This is normal, choose "continue". This places the resulting token in a well known location so it can be accessed by gcloud or the client libraries. gcloud auth application-default login --no-browser --client-id-file=client_secret.json --scopes='https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/generative-language.retriever' gcloud auth application-default login --no-browser --client-id-file=client_secret.json --scopes='https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/generative-language.retriever' gcloud auth application-default login --no-browser --client-id-file=client_secret.json --scopes='https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/generative-language.retriever' Once you have the application default credentials (ACD) set, the client libraries in most languages need minimal to no help to find them. The quickest way to test that this is working is to use it to access the REST API using curl: access_token=$(gcloud auth application-default print-access-token) project_id=<MY PROJECT ID> curl -X GET https://generativelanguage.googleapis.com/v1/models \ -H 'Content-Type: application/json' \ -H "Authorization: Bearer ${access_token}" \ -H "x-goog-user-project: ${project_id}" | grep '"name"' access_token=$(gcloud auth application-default print-access-token) project_id=<MY PROJECT ID> curl -X GET https://generativelanguage.googleapis.com/v1/models \ -H 'Content-Type: application/json' \ -H "Authorization: Bearer ${access_token}" \ -H "x-goog-user-project: ${project_id}" | grep '"name"' In python the client libraries should find them automatically: import google.generativeai as genai print('Available base models:', [m.name for m in genai.list_models()]) import google.generativeai as genai print('Available base models:', [m.name for m in genai.list_models()]) If that's working you're ready to try Semantic retrieval on your text data. In many cases you won't have the gcloud command available to create the access token from the Client ID (client_secret.json). Google provides libraries in many languages to let you manage that process within your app. This section demonstrates the process, in python. There are equivalent examples of this sort of procedure, for other languages, available in the Drive API documentation Install the Google client library for Python, and the Gemini client library. pip install --upgrade -q google-api-python-client google-auth-httplib2 google-auth-oauthlib pip install google-generativeai pip install --upgrade -q google-api-python-client google-auth-httplib2 google-auth-oauthlib To minimize the number of times you have to click through the authorization screens, create a file called load_creds.py in your working directory to caches a token.json file that it can reuse later, or refresh if it expires. Start with the following code to convert the client_secret.json file to a token usable with genai.configure: import os.path from google.auth.transport.requests import Request from google.oauth2.credentials import Credentials from google_auth_oauthlib.flow import InstalledAppFlow SCOPES = ['https://www.googleapis.com/auth/generative-language.retriever'] def load_creds(): """Converts `client_secret.json` to a credential object. This function caches the generated tokens to minimize the use of the consent screen. """ creds = None # The file token.json stores the user's access and refresh tokens, and is # created automatically when the authorization flow completes for the first # time. if os.path.exists('token.json'): creds = Credentials.from_authorized_user_file('token.json', SCOPES) # If there are no (valid) credentials available, let the user log in. if not creds or not creds.valid: if creds and creds.expired and creds.refresh_token: creds.refresh(Request()) else: flow = InstalledAppFlow.from_client_secrets_file( 'client_secret.json', SCOPES) creds = flow.run_local_server(port=0) # Save the credentials for the next run with open('token.json', 'w') as token: token.write(creds.to_json()) return creds import os.path from google.auth.transport.requests import Request from google.oauth2.credentials import Credentials from google_auth_oauthlib.flow import InstalledAppFlow SCOPES = ['https://www.googleapis.com/auth/generative-language.retriever'] def load_creds(): """Converts `client_secret.json` to a credential object. This function caches the generated tokens to minimize the use of the consent screen. """ creds = None # The file token.json stores the user's access and refresh tokens, and is # created automatically when the authorization flow completes for the first # time. if os.path.exists('token.json'): creds = Credentials.from_authorized_user_file('token.json', SCOPES) # If there are no (valid) credentials available, let the user log in. if not creds or not creds.valid: if creds and creds.expired and creds.refresh_token: creds.refresh(Request()) else: flow = InstalledAppFlow.from_client_secrets_file( 'client_secret.json', SCOPES) creds = flow.run_local_server(port=0) # Save the credentials for the next run with open('token.json', 'w') as token: token.write(creds.to_json()) return creds import pprint import google.generativeai as genai from load_creds import load_creds creds = load_creds() genai.configure(credentials=creds) print() print('Available base models:', [m.name for m in genai.list_models()]) import pprint import google.generativeai as genai from load_creds import load_creds creds = load_creds() genai.configure(credentials=creds) print() print('Available base models:', [m.name for m in genai.list_models()]) The first time you run the script, it opens a browser window and prompts you to authorize access. If you're not already signed in to your Google Account, you're prompted to sign in. If you're signed in to multiple accounts, be sure to select the account you set as a "Test Account" when configuring your project. If you're not already signed in to your Google Account, you're prompted to sign in. If you're signed in to multiple accounts, be sure to select the account you set as a "Test Account" when configuring your project. Authorization information is stored in the file system, so the next time you run the sample code, you aren't prompted for authorization. Authorization information is stored in the file system, so the next time you run the sample code, you aren't prompted for authorization. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates.